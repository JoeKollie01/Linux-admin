Linux File Editors
======================
A text editor is a program which enables user to create and manipulate 
data (text) in a Linux file

There are several standard text editors avialable on most Linux systems

    -vi =============== visual editor
    -ed ================ standard line editor
    -ex ================== extended line editor
    -emacs =============== a full screen editor
    -pico =================  beginner's editor
    -vim ================= advance version of vi

Vi = is available in almost every Linux Distributions

Introduction to vi Editor
===========================
vi supplies command for:
    - Inserting and deleting text
    - Replacing text
    - Moving around the file
    - Finding and substituting strings
    - Cutting and pasting text


Most common keys

    -i = Inserting
    - Esc = escape out any mode
    - r = replace
    - :q = quit without saving
    - :wq! = quit and save

Note: When navigating the vi editor, use the arrow keys on the keyboard.
    By pressing the "d" will delete an entire lines and hitting the "u" will undo the changes
    It is important to note that navigating while the editor is in insert mode can break it

        -dd = delete a line
        -u = undo changes
        -s = delete a single character
         shift + zz = save changes
         -r = replace a single letter
         -x = delete a single letter
         - o = create a line 
         /"keyword = provide only the keyword the user is searching for

Difference between vi and vim editor
====================================

As far as functionality is concerned, both editors work in the same manner.
Which editor the user choose is a matter of personal choice. Some people recommend learning
the vim editor instead of the vi editor. Due to added features, learning and using vim editor is much easier than the vi editor

Since vim is based on the vi, the user will learn how to use the vim editor

vim has all the features as vi with some excellent addition

There's also a comprehensive help system and lots of customization options available

sed Command
================

Replace a string in a file with a newstring
Find and delete a line
Remove empty lines
Remove the first or n lines in a file
To replace tabs with spaces
Show defined lines from a file
Substitute within vi editor

    -E.g  sed 's/word-to-replace/new-word/g' filename
            - sed 's/Kenny/Lenny/' seinfield-characters
        
    Note: it display the changes to the screen not the file

        - sed -i 's/Kenny/Lenny/g' seinfield-characters

        Changes are made to the file and display as well


        - sed 's/Costanza//g' seinfield-characters
            = the above command remove name associated with the user

        Find a string of line and remove it
        sed '/keyword/d' seinfield-characters

        Remove empty lines from a file
        ==============================
        sed '/^$/d' seinfield-characters

        Delete first two lines of a file
        ==================================
        sed '1,2d' seinfield-characters

        Remove tab from a file
        ============================
        sed 's/\t//g' seinfield-characters

        View only line from 12 - 18
        ================================
        sed -n 12,18p seinfield-characters

        View everything expect line 18
        ================================
        sed 12,18d seinfield-characters

        Create space after every line and characters
        ============================================
        sed G seinfield-characters

        Replace a character expect other character on different line
        ============================================================
        sed '8!s/Seinfield/S/g' seinfield-characters


User Account Management
=============================

Commands to create user
-----------------------

    *useradd
    *groupadd
    *userdel
    *groupdel
    *usermod

Files where user(s) are found
-----------------------------

    /etc/passwd 
    /etc/group
    /etc/shadow

Example

    useradd -g superheros -s /bin/bash -c  "user description" -m -d /home/spiderman spiderman

Verify the user account was created
=====================================

Run id username 
    E.g id spiderman

Command to create  a group
================================
    groupadd groupname
    E.g groupadd superheros

Verify the group was created
=================================
    cat /etc/group

Delete a group
=====================
    groupdel groupname
    E.g groupdel nonewgroup

Delete user that was created
==============================
    userdel username

    E.g userdel spiderman

To delete the home directory of the user
========================================

    userdel -r spiderman


Add user to a group
=======================
    usermod -G groupname username

    E.g usermod -G superheros spiderman

Verify the user was added to a group
===================================

    grep username /etc/group

Change the group of the user
============================
    chgrp groupname username
        E.g chgrp superheros spiderman

Run the -R with the command to cascade the changes
====================================================
    chgrp -R groupname username



The /etc/login.def File
========================

The change command - per user
    Example

change [-m min-days] [-M maxdays] [-d lastday] [-I inactive] [-E expiredate] [-W warndays]
user

File = /etc/login.defs

    PASS_MAX_DAYS  99999
    PASS_MIN_DAYS   0
    PASS_WARN_AGE   7

The chage Command
====================
    change user password expiry information

    change [-m min-days] [-M maxdays] [-d lastday] [-I inactive] [-E expiredate] [-W warndays]
user

    Ex. chage -m 5 -M 90 -W 10 -I 3 username (babubutt)


Switch Users and sudo Access
=============================

    Commands
    su - username
    sudo command
    visudo 


    File = /etc/sudoers 

    Adding user to wheel group
    ========================
    usermod -aG wheel test (username)

Monitor Users
===============

    Commands
    ---------
    who - show who is logged on
    last - show a listing of last logged in users
    w  - show who is logged on and what they are doing
    finger -
    id

    Command to view the usernames that are login
    ============================================
    last | awk '{print $1}'


Talking to Users
================

Commands
    *users - print the user name of users currently logged in to the current host

    *wall - write a message to all users
        - when issue the command by typing in the message of today press ctrl + d

    *write - send a message to another user


Linux Account Authentication
==============================

Types of accounts
    - local account
    - Domain/Directory accounts

Windows = Active Directory
Linux = LDAP - is a protocol use to authenticate against a directory

Difference between Active Directory, LDAP, IDM, WinBIND ,OpenLDAP etc
=====================================================================

Active Directory = Microsoft
IDM = Identity Manager
WinBIND = used in Linux to communicate with Windows (Samba)
OpenLDAP (open source) 
IBM Directory Server
JumpCloud
LDAP = Lightweight Directory Access Protocol

System Utility Commands
=========================
date

uptime
    11:18:23 up 83 days,18:29 4 users, load average 0.16,0.03,0.01

    11:18:23 - that's the current Linux system time
    up 83 days,18:29 = shows for how long system has been running
    4 users - number of users currently logged into your Linux System
    load average 0.16,0.03,0.01 - the average CPU load (average number of jobs in your system's run queue)
    for the 1,5 and 15 minutues

    
hostname

uname - print system information
which - show the path of (Shell) commands
cal - display a calendar
bc - an arbitrary precision calculator language


Processes and jobs
===================
Application = Service
Script  = is a list of instructions 
Processes
daemon
Threads
Job
    Process /Services Commands
    =========================
    systemctl or service
    ps
    top
    kill
    crontab

Systemctl command
=====================

systemctl command is a new tool to control system Services

It is available in version 7 and later it replaces the services command

Usage Example
    systemctl start|stop|status servicename (firewalld)
    systemctl enable servicename.service
    systemctl restart | reload servicename.service
    systemctl list-units --all

The output has the following columns

Unit - the systemd unit name
Load - whether the unit configuration has been parsed by systemd. The configuration of loaded units is kept in Memory
Active - summary state about whether the unit is active. This is usually a fairly basic way 
to tell if the unit has started successfully or not

SUB - this is a lower-level state that indicates more detailed information about the unit.
This often varies by unit type, state and the actual method in which the unit returns

DESCRIPTION : a short textual description of what the unit is/does

To add a service under systemctl management
    - create a unit file in /etc/systemd/system/servicename.service

To control system with systemctl
    systemctl poweroff 
    systemctl  halt
    systemctl reboot

PS Command
============

ps command stands for process status and it displays all the currently running processes in the Linux system

Usage Examples
    - ps = shows the process of the current shell

PID = the unique process ID
TTY = terminal type that the user logged in to
TIME = amount of CPU in minutes and seconds that the process has been running 
CMD = name of the command

ps -e = shows all running processes
ps aux = shows all running processes in BSD format
ps -ef = show all running processes in full format listing (Most commonly used)
ps -u username = shows all processes by username

E.g  Viewing only processes of firewalld in Linux
=================================================
    ps -ef | grep firewalld


top command
================
top command is used to show the Linux processes and it provides a real-time view of the running system
The command show the summary information of the system and the list of processes or threads which are currently managed by the Linux kernel
When the top command is executed then it goes into interactive mode and you can exit out by hitting "q"


Usage: top

PID = show task unique process id
USER = username of ownner of task
PR = the PR field shows the scheduling priority of the process from the perspective of the kernel
NI = represent a NICE value of task. A Negative nice value implies higher priority and positive Nice value means lower priority
VIRT = total virtual memory used by the task
RES = memory consumed by the process in Rename
S = this field shows the process state in the single letter form
%CPU = represent the CPU Usage
%MEM = shows the memory usage of task
TIME+ = CPU time, the same as TIME but reflecting more granularity through hundredth of a seconds

top -u username = shows tasks / processes by user owned
top then press c = show command absolute path
top then press k = kill a process by PID within top session
top then M and P = to sort all Linux running processes by Memory usage

kill command
=================
kill command is used to terminate processes manually. It sends a signal which ultimately terminates or kills a particular process or group of processes

Usage:

kill [OPTION] [PID]
 OPTION = signal name or signal number / ID
 PID = Process ID

 kill -l = to get a list of all signal names or signal number

 Most used signals are:
 ====================
 kill PID = kill a process with default signal
 kill -1 = restart
 kill -2 = interrupt from the keyboard just like CTRL c
 kill -9 = forecefully kill the process
 kill -15 = kill a process gracefully
 killall = unrelated and child processes
 pkill  = use the process name to kill


 crontab command
 ==================
 crontab command is used to schedule tasks

 crontab -e = edit the crontab
 crontab -l = list the crontab entries
 crontab -r = remove the crontab
 crond = crontab daemon/service that manages scheduling
 systemctl status crond = to manage the crond 


Create crontab entry by scheduling a task:
    crontab -e 
    schedule, echo "This is my first crontab entry" > crontab-entry

By default there are 4 different types of crontabs
    -Hourly
    -Daily
    -Weekly
    -Monthly

All the above crons are setup in 
    /etc/cron_ (directory)

The timing for each are set in
    -/etc/anacrontab -- except Hourly

For Hourly
    - etc/cron.d/0hourly

Note: If you want to run a script daily/Hourly/weekly/monthly ======> move your script
to the following files or directory




at command
===========
at command is like crontab which allows you to schedule jobs but only once
When the command is run it will enter interactive mode and you can get out by pressing CTRL d

Usage:
    at HH:MM PM = schedule a job 
    atq = list the at entries
    atrm # = remove at entry 
    atd =  at daemon/service that manages scheduling
    systemctl status atd = to manage the atd service

Create at entry scheduling  a task:

    at 4:45PM ===> enter
    echo "This is my first at entry" > at-entry
    at 2:45 AM 11012023 = schedule a job to run on Nov 01 2023 at 2:45AM
    at 4PM + 4 days = schedule a job at 4pm four days from nonewgroup
    at 8:00 AM Sun = schedule a job to 8am on coming Sunday
    at 10:00 AM next month = schedule a job to 10am next month


Process Management
==============================
Background = Ctrl -z , job and begin

Foreground = fg 

Run process even after exit = nohup process &
    nohup process > /dev/null 2>&1 &

Kill a process by name  = pkill

Process priority = nice ( e.g nice -n 5 process)
    - The niceness scale goes from -20 to 19. The lower the number more priority that task gets

Process monitoring = top

List process = ps


System Monitoring
================
top = display Linux processes

df = report file system disk space usage

dmesg = print or control the kernel ring buffer

iostat =  report cpu statistics and input/output statistics for devices and partitions 

nestat = print network connections, routing tables, interface statistics, masquerade connections
        and multicast memberships

        netstat -rnv
free = allocate and free dynamic memory

cat /proc/cpuinfo =  show cpu information

cat /proc/meminfo = show memory information


Log Monitoring
==================

Another and most important way of system Administration is log monitor

Log Directory = /var/log
boot 
Chronyd = NTP
cron
maillog
secure
messages
httpd 

System Maintenance Commands
===========================
    -Shutdown
    - init 0 - 6
    -reboot
    -halt


Changing System Hostname
========================

hostnamectl set-hostname newhostname = command to change the hostname of a Linux machine

version 7 = edit /etc/hostname
version 6 = edit /etc/sysconfig/network

Finding System information
===========================

    cat /etc/redhat-release
    uname -a 
    dmidecode

System Architecture
=====================
    Differences between a 32-bit and 64-bit CPU
    A big difference between 32-bit processors and 64 bit processors is the number of calculations per seconds
    they can perform

    Command
    --------
    arch
    uname -a 

Terminal Control keys
========================
Several key combinations on your keyboard usually have a special effect on the terminal

These "control" (CTRL) keys are accomplished by holding the CTRL key while typing the second key.
For example, CTRL -c means to hold the CTRL key while you type the letter "c"


The most common control keys are listed below:

    CTRL -u = erase everything you've typed on the command line
    CTRL -c  = stop/kill a command
    CTRL -z = suspend a command
    CTRL -d = exit from an interactive program

Terminal Commands
==================

    -clear = clears your screen
    -exit = exit out of the shell,terminal or a user session
    - script  = command stores terminal activities in a log file that can be named
                by a user, when a name is not provided by a user, the default file name typescript is used


Recover Root Password
=====================

-Restart your computer
-Edit grub
-Change password
-reboot
 
    At the end of the line with "quiet" type in rd.break
    Do ctrl x to start
    rw init=/sysroot/bin/sh
    ctrl x
    chroot /sysroot
    passwd root
    exit
    reboot

What is SOS Report
==================
 SOS report = collect and package diagnostic and support data

 Package name
    - sos-version

Environment variables
=====================

What are environment variables ?
    An environment variable is a dynamic-named value that can affect the way running processes will behave on a computer. They are part of the environment in which a process returns
    
    In simple words: set of defined rules and values to build an environment

To view all environment variables
    - printenv or env

To view One environment variable
    - echo $SHELL
To set the environment variables
    - export TEST=1
    -  echo $TEST

To set environment variable permanently
    -vi .bashrc
    - TEST='123'
    - export TEST

To set global environment variable permanently
    -vi /etc/profile or /etc/bashrc
    - TEST='123'
    - export TEST

Special Permission with setuid, setgid and sticky bit
=====================================================

All permissions on a file or directory are referred as bits

There are 3 additional permissions in Linux
    -setuid: bit tells Linux to run a program with the effective user id of the owner instead of the executor
        E.g (passwd command) ====> /etc/shadow
    
    -setgid: bit tell Linux to run a program with the effective group id of the owner instead of the executor: (e.g locate or wall command)
        Note!! This bit is present for only files which have executable permissions

        
    Note: " setuid and setgid" are not actual commands

sticky bit : a bit set on files /directories that allows only the owner or root to delete those files


To assign special permissions at the user level
===============================================
    chmod u+s xyz.sh

To assign special permissions at the group level
================================================
    chmod g+s xyz.sh

To remove special permissions at the user or group level
========================================================
    chmod u-s xyz.sh
    chmod g-s xyz.sh

To find all executables in Linux with setuid and setgid permissions
===================================================================
    - find / -perm /6000 -type f 


Note: These bits work on c programming executables not on bash shell scripts

Sticky bit
==========
    - it is assigned to the last bit of permissions
         Why Example of /tmp directory

        To assign sticky bit to a dir for accidentally deletion
        ========================================================
            chmod +t /nameof the dir

























