Commands Syntax
===================

* Command options and arguments

Commands typically have the syntax:
    command option(s) argument(s)


options

Modify the way that a command works
Usually consist of a hyphen (-) or dash followed by a single letter
Some commands accept multiple options which usually be grouped together after a single hyphen

arguments

Most commands are used together with one or more arguments
Some commands assume a default argument if none is supplied
Arguments are optional for some commands and required by others


File Permissions
=================
Unix is a multi-user system.Every file and directory in your account can be protected from or made accessible to other users by changing its access permissions.
Every user has responsibility for controlling access to their files

*Permissions for a file or directory may be restricted to by types

*There are 3 type of permissions
    - r = read 
    - w = write
    - x = execute - running a programming

Each permission (rwx) can be controlled at three levels

    - u - user = yourself
    - g - group = can be people in the same project
    - o  - other = everyone on the system

File or Directory permission can be displayed by running ls -l command
    -rwxrwxrwx

Command to change permission
    - chmod

    command to remove file permission for everyone 
        - chmod a-rwx filename

Permission Using Numeric modified
=====================================
    Permission to a file and directory can also be assigned numerically
        -chmod ugo + r File

        Or -chmod 444 File

                -r--r--r--

Owners assigned Permission On Every File and directory

    User ==============> Read, Write, Execute
    Group ==============> Read, Write, Execute
    All ================> Read, Write, 
    
The table below assigns numbers to permissions type

Numbers         Permission type         Symbol
0               No Permission           ---
1               Execute                 --x
2               Write                   -w-
3               Execute + Write         -wx
4               Read                    r--
5               Read + Execute          r-x
6               Read + Write            rw-
7               Read+Write+Execute      rwx


Command "Chmod" => change file mode bits/permissions


File Ownership
===============
 There are 2 owners of a file or directory
    -User and group

Command to change file Ownership
    -chown and chgrp
    *chown = changes the ownership of a file
    *chgrp = changes the group ownership of a file

Recursive ownership change option (Cascade)

    -R

Access Control List (ACL)
============================

What is ACL
    - Access control list provides an additional, more flexible permission mechanism
    for file systems. It is designed to assist with UNIX file permissions. ACL allows you to give permissions
    for any user or group to any disc resource

Use of ACL
    Think of a scenario in which a particular user is not a member of group created by you
    but still you want to give some read or write access how can you do it without making user a member of group
    ,here comes in picture Access Control List, ACL helps us to do this trick

    Basically, ACL are used to make a flexible permission mechanism in Linux

    From Linux man pages, ACL are used to define more fine-grained discretionary access
    rights for files and directories

    Commands to assign and remove ACL permissions are:

        - setfacl and getfacl

        getfacl = provide more information about the file

    List of commands for setting up ACL:

    1) To add permission for user
        - setfacl -m u:user:rwx /path/to/file

    2) To add permissions for a group
        - setfacl -m g:group:rw  /path/to/file
    
    3) To allow all files or directories to inherit ACL entries from the directory it is within
        - setfacl -Rm "entry" /path/to/dir

    4) To remove a specific entry
        - setfacl -x u:user /path/to/file (For a specific user)
    
    5) To remove all entries
        -setfacl -b path/to/file (For all users)

    Note:
        As you assign the ACL permission to a file/directory it adds + sign at the end of the permission
        Setting w permission with ACL does not allow to remove a file

Help Commands
====================

    - There are 3 types of help commands

        - whatis command
        -command --help
        - man command


TAB Completion and Up arrow
==============================

Hitting TAB key completes the available commands files or directories
    -chm TAB
    - ls j<TAB>
    - cd Des<TAB>

Hitting up arrow key on the keyboard returns the last command ran

Adding Text to Files (Redirects)
================================
3 Simple ways to add text to a file
    -vi
    -Redirect command output > or >>
    -echo > or >>

Note: To add more text to a file via the terminal, " >> " instead of ">" .
 The ">" will overwrite the content of the file

Input and Output redirects
===========================
There are 3 redirects in Linux
    - Standard input (stdin) and it has file descriptor number as 0
    - Standard output (stdout) and it has file descriptor number as 1
    - Standard error (stderr) and it has descriptor number as 2

Output (stdout) - 1
    By default when running a command its output goes to the terminal
    The output of a command can be routed to a file using > symbol
        E.g
        - ls -l > listings
        - pwd > findpath
    
    If using the same file for additional output or to append to the same file then use >>
        E.g
        -ls -la >> listings
        - echo "Hello World" >> findpath

Input (stdin) - 0

    Input is used when feeding file contents to a file
        E.g
        - cat < listings
        - mail -s "Office memo" allusers@abc.com < memoletter

Error(stderr) - 2

    What a command is executed we use a keyboard and that is also considered (stdin -0)
    That command output goes on the monitor and that output is (stdout -1)
    If the command produced any error on the screen then it is considered (stderr - 2)

        We can use redirects to route errors from the screen
            - E.g  ls -l /root 2> errorfile


Standard Output to a File (tee)
=================================
    tee command is used to store and view (both at the same time) the output of any command

    The command is named after the T-splitter used in plumbing. It basically breaks the output of a program so that it can be both displayed and saved in a file.
    It does both the tasks simultaneously, copies the result into the specified files or variables and also display the result



        command ======>  tee =====> stdout
                           =
                           =
                           =
                           file
 
 E.g  echo "Linux is fun to learn" | tee learning
      echo "Linux is fun to learn" | tee -a learning



Command "wc"
==============
wc = print newline, word, and byte counts for each file

E.g wc -c eliane-david



Pipes
=========

A pipe is used by the shell to connect the output of one command directly to the input
of another command

The symbol for a pipe is the vertical bar(|). The command syntax is:

    command1 [arguments] | command2 [arguments]

"Tail" command give you the last line of your output
E.g ls -l | tail -1

File Maintenance Commands
============================
    cp = copy files and directories
    rm =  rm files and directories
    mv =  move (rename) files
    mkdir =  make directories
    rmdir or rm -r = remove directories
    chgrp =  change group ownership
    chown =  change file owner and group


File Display Commands
=========================

cat = concatenate files and print on the standard output
    - E.g  cat  filename

more = display files on a page-by-page basis

    -E.g more filename

less = opposite of more

    -E.g less filename

head = output the first part of files

    -E.g head  -2 filename =====> allow the user to view only two lines contents of a particular file

tail =  output the last part of files

    -E.g tail -2 messages


Filters / Text Processors Commands
===================================

cut = remove sections from each line of files

    cut filename = Does not work
    cut --version = check version
    cut -c1 filename = List one character
    cut -c1,2,4 filename = Pick and chose character
    cut -c1-3 filename = List range of characters
    cut -c1-3, 6-8 filename = List specific range of 
    cut -b1-3 filename = List by btye size
    cut -d: -f 6 /etc/passwd = List first 6th column separated by :
    ls -l | cut -c2-4 = Only print user permissions of files/dir
    



awk =  pattern scanning and processing language

    awk --version = check version
    awk '{print $1}' file = List 1st field from a file
    ls -l | awk '{print $1, $3}' = list 1 and 3rd field of ls -l output
    ls -l | awk '{print $NF}' = Last field of the output
    awk ' /kramer/ {print}' filename = search for a specific word
    awk -F: '{print $1}' /etc/passwd = output only 1st field of /etc/passwd
    echo "Hello Tom" | awk '{$2="Adam"; print $0}' = Replace words field words
    cat file | awk '{$2="Kollie"; print $0}' = replace words field words
    awk 'length($0) > 15' file = Get lines that have more than 15 byte size
    ls -l | awk '{if($9 == "seinfield") print $0;}' = get the field matching seinfield in /home/test
    ls -l | awk '{print NF}' = number of fields.






grep and egrep = print lines that match patterns

sort = sort lines of text files

uniq = report or omit repeated lines

wc = print newline, words, and byte counts for each file








